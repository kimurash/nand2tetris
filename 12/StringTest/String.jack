// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int maxLen;
    field int strLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(~(maxLength > 0)){
            // do Sys.error(14);
            let maxLength = 1;
        }

        let buffer = Array.new(maxLength);
        let maxLen = maxLength;
        let strLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do buffer.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return(strLen);
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j < strLen){
            return(buffer[j]);
        } else{
            do Sys.error(15);
            return(null);
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j < strLen){
            let buffer[j] = c;
        } else{
            do Sys.error(16);
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(strLen < maxLen){
            let buffer[strLen] = c;
            let strLen = strLen + 1;
        } else{
            do Sys.error(17);
        }
        return(this);
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(strLen = 0){
            do Sys.error(18);
        } else{
            let strLen = strLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, d;
        var int i;
        var boolean neg;

        let v = 0;
        if((strLen > 0) & (buffer[0] = 45)){
            let neg = true;
            let i = 1;
        } else{
            let neg = false;
            let i = 0;
        }

        while((i < strLen) & (String.isDigit(buffer[i]))){
            let d = buffer[i] - 48;
            let v = 10 * v + d;
            let i = i + 1;
        }

        if(neg){
            return(-v);
        } else{
            return(v);
        }
    }

    function boolean isDigit(char c){
        return(~(c < 48) & ~(57 < c));
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let strLen = 0; // clear string

        if(val < 0){
            let val = -val;
            do appendChar(45);
        }

        do doSetInt(val);
        return;
    }

    method void doSetInt(int n){
        // var char c;
        var int q, mod;

        let q = n / 10;
        let mod = n - (10 * q);
        // let c = mod + 48; [FIXME]
        if(n < 10){
            do appendChar(mod + 48);
        } else{
            do doSetInt(q);
            do appendChar(mod + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return(128);
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return(129);
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return(34);
    }
}
