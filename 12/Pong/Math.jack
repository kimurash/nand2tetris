// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThePower;

    /** Initializes the library. */
    function void init() {
        var int i;

        let i = 1;
        let twoToThePower = Array.new(16);
        let twoToThePower[0] = 1;
        while(i < 16){
            let twoToThePower[i] = twoToThePower[i-1] + twoToThePower[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return(-x);
        } else{
            return(x);
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int j;
        var int sum;
        var int shiftedX;

        let j = 0;
        let sum = 0;
        let shiftedX = x;
        while(j < 16){
            if(Math.bit(y, j)){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return(sum);
    }

    function boolean bit(int x, int j){
        return(~((x & twoToThePower[j]) = 0));
    }

    function int getTwoToThePower(int idx){
        return(twoToThePower[idx]);
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int negX, negY;
        var int q;

        if(y = 0){
            do Sys.error(3);
            return(0);
        }

        let negX = x < 0;
        let negY = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x){
            return(0);
        }

        let q = Math.divide(x, y + y);
        if((x - (2 * q * y)) < y){
            let q = q + q;
        } else{
            let q = q + q + 1;
        }

        if(negX = negY){
            return(q);
        } else{
            return(-q);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int j;
        var int y;
        var int approx;
        var int approxQ;

        if(x < 0){
            do Sys.error(4);
            return(0);
        }

        let y = 0;
        let j = 7;
        while(~(j < 0)){
            let approx = y + twoToThePower[j];
            let approxQ = approx * approx;
            if(~(approxQ > x) & (approxQ > 0)){
                    //          in case of overflow
                let y = approx;
            }
            let j = j - 1;
        }
        return(y);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b){
            return(b);
        } else{
            return(a);
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return(a);
        } else{
            return(b);
        }
    }
}
